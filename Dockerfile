# Chunk 1
#
# Use node-20-alpine as the base image
FROM node:20-alpine AS base

# Rebuild the source code only when needed
FROM base AS builder

# Set working directory to `/app`
WORKDIR /app

# Copy over the `package.json` and any lock files for a package manager
COPY package.json .npmrc package-lock.json*  ./

# Install dependencies
RUN npm ci

# Copy all the files from the local repo into the Docker container
COPY . .
# Copy environment variables
COPY .env.local .env

# Set production environment
ENV NODE_ENV=production

# Build Next.js based on the preferred package manager
RUN npm run build
# End of Chunk 1

# Chunk 2
# Get the production image we just built in the Chunk 1
FROM base AS runner

# Set the working directory to `/app`
WORKDIR /app

# We don't want to run production as the `root` user
# so we create a `nextjs` user and add it to the `nodejs` group.
# This is recommended to prevent unauthorized use if your app is compromised
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# We change from `root` to `nextjs` user
USER nextjs

# Copy all the necessary files generated by Next.js
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Optional, disable nextjs telemetry
ENV NEXT_TELEMETRY_DISABLED=1

# Optional but recommended to set the production environment
# Expose the application port
EXPOSE 3000
# Set the port environment variable
ENV PORT=3000
# Set the hostname for the server
ENV HOSTNAME="0.0.0.0"

# We run the `server.js` that is generated from `./next/standalone/server.js`
CMD ["node", "server.js"]